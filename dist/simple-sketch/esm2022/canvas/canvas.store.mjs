import { Injectable, inject } from '@angular/core';
import { ComponentStore } from '@ngrx/component-store';
import { BehaviorSubject, combineLatest, debounceTime, filter, fromEvent, of, switchMap, takeUntil, tap, } from 'rxjs';
import { WINDOW } from '../injection-tokens';
import * as i0 from "@angular/core";
export var Mode;
(function (Mode) {
    Mode["ERASE"] = "erase";
    Mode["SKETCH"] = "sketch";
})(Mode || (Mode = {}));
const INITIAL_STATE = {
    backgroundColor: '#000000',
    canvasOffsetX: 0,
    canvasOffsetY: 0,
    isSketching: false,
    lineWidth: 5,
    mode: Mode.SKETCH,
    paintColor: '#ffffff',
    startX: 0,
    startY: 0,
};
export class SimpleSketchCanvasStore extends ComponentStore {
    canvas$ = new BehaviorSubject(null);
    context$ = new BehaviorSubject(null);
    window = inject(WINDOW);
    /**
     * +-------------------------------------------+
     * SELECTORS
     * +-------------------------------------------+
     */
    backgroundColor$ = this.select(state => state.backgroundColor);
    paintColor$ = this.select(state => state.paintColor);
    canvasOffsetX$ = this.select(state => state.canvasOffsetX);
    canvasOffsetY$ = this.select(state => state.canvasOffsetY);
    isSketching$ = this.select(state => state.isSketching);
    lineWidth$ = this.select(state => state.lineWidth);
    mode$ = this.select(state => state.mode);
    /**
     * +-------------------------------------------+
     * UPDATERS
     * +-------------------------------------------+
     */
    updateBackGroundColor = this.updater((state, newBackgroundColor) => ({
        ...state,
        backgroundColor: newBackgroundColor,
    }));
    updateIsSketching = this.updater((state, isSketching) => ({
        ...state,
        isSketching,
    }));
    updateCanvasOffsetX = this.updater((state, newCanvasOffsetX) => ({
        ...state,
        canvasOffsetX: newCanvasOffsetX,
    }));
    updateCanvasOffsetY = this.updater((state, newCanvasOffsetY) => ({
        ...state,
        canvasOffsetY: newCanvasOffsetY,
    }));
    updatePaintColor = this.updater((state, newPaintColor) => ({
        ...state,
        paintColor: newPaintColor,
    }));
    updateMode = this.updater((state, newMode) => ({
        ...state,
        mode: newMode,
    }));
    updateStartX = this.updater((state, newStartX) => ({
        ...state,
        startX: newStartX,
    }));
    updateStartY = this.updater((state, newStartY) => ({
        ...state,
        startY: newStartY,
    }));
    /**
     * +-------------------------------------------+
     * EFFECTS
     * +-------------------------------------------+
     */
    applyBackgroundColor = this.effect(() => {
        return combineLatest([this.backgroundColor$, this.canvas$]).pipe(tap(([color, canvas]) => {
            if (canvas) {
                canvas.style.backgroundColor = color;
            }
        }));
    });
    clearCanvas = this.effect(trigger$ => combineLatest([trigger$, this.context$, this.canvas$]).pipe(tap(([, context, canvas]) => {
        if (context && canvas) {
            context.clearRect(0, 0, canvas.width, canvas.height);
        }
    })));
    init = this.effect((data$) => {
        return data$.pipe(tap(([canvas, backgroundColor, paintColor]) => {
            const context = canvas.getContext('2d');
            // Initialize canvas & context properties using the supplied `canvas`.
            this.canvas$.next(canvas);
            this.context$.next(context);
            // Canvases must have their width and height pixel values set. The
            // canvas' _parent (`.canvas-wrapper`), flexes to grow to the
            // available space. Set the actual canvas element to the pixel
            // dimensions available inside its parent.
            const canvasWrapper = canvas.parentElement;
            const canvasWrapperSize = this.getElementSizeMinusPadding(canvasWrapper);
            this.updateCanvasSize([
                canvasWrapperSize.width,
                canvasWrapperSize.height,
            ]);
            // Set some prperties in component state.
            this.updateCanvasOffsetX(canvas.offsetLeft);
            this.updateCanvasOffsetY(canvas.offsetTop);
            this.updateBackGroundColor(backgroundColor);
            this.updatePaintColor(paintColor);
            this.applyBackgroundColor();
            // Subscribe to resize events so the canvas' pixel dimensions redraw
            // using the values from the post-resize available space.
            fromEvent(this.window, 'resize')
                .pipe(takeUntil(this.destroy$), debounceTime(75))
                .subscribe(() => {
                const canvasWrapperSize = this.getElementSizeMinusPadding(canvasWrapper);
                this.updateCanvasSize([
                    canvasWrapperSize.width,
                    canvasWrapperSize.height,
                ]);
            });
        }));
    });
    sketch = this.effect((event$) => {
        return combineLatest([
            event$,
            this.context$,
            this.isSketching$,
            this.lineWidth$,
            this.canvasOffsetX$,
            this.canvasOffsetY$,
            this.paintColor$,
            this.mode$,
        ]).pipe(tap(([event, context, isSketching, lineWidth, canvasOffsetX, canvasOffsetY, paintColor, mode,]) => {
            if (!isSketching || context === null)
                return;
            context.globalCompositeOperation =
                mode === Mode.SKETCH ? 'source-over' : 'destination-out';
            // Make the eraser larger than the finer point brush used for
            // sketching.
            const eraserLineWidth = lineWidth * 1.7;
            context.lineWidth =
                mode === Mode.SKETCH ? lineWidth : eraserLineWidth;
            context.lineCap = 'round';
            context.strokeStyle = paintColor;
            const screenPosition = this.eventPosition(event);
            context.lineTo(screenPosition.x - canvasOffsetX, screenPosition.y - canvasOffsetY);
            context.stroke();
        }));
    });
    startSketch = this.effect((event$) => {
        return combineLatest([event$, this.context$]).pipe(tap(([event, context]) => {
            const screenPosition = this.eventPosition(event);
            this.updateIsSketching(true);
            this.updateStartX(screenPosition.x);
            this.updateStartY(screenPosition.y);
        }));
    });
    stopSketch = this.effect((event$) => {
        return combineLatest([event$, this.context$]).pipe(tap(([, context]) => {
            this.updateIsSketching(false);
            context?.stroke();
            context?.beginPath();
        }));
    });
    updateCanvasSize = this.effect((args$) => {
        return args$.pipe(switchMap(([width, height]) => {
            return combineLatest([
                this.canvas$,
                this.context$,
                of(width),
                of(height),
            ]);
        }), filter(
        /* eslint-disable @typescript-eslint/no-unused-vars */
        ([canvas, context, width, height]) => canvas !== null && context !== null), tap(([canvas, context, width, height]) => {
            // Resizing the canvas will clear its contents, so store the current
            // canvas contents before resizing so they can be restored after.
            const currentCanvasContent = context.getImageData(0, 0, canvas.width, canvas.height);
            // Now resize the canvas
            canvas.width = width;
            canvas.height = height;
            // Reapply saved contents/
            context.putImageData(currentCanvasContent, 0, 0);
        }));
    });
    /**
     * +-------------------------------------------+
     * CLASS METHODS
     * +-------------------------------------------+
     */
    /**
     * Takes a mousemove or touchmove event and return the corresponding position
     * on the screen where the event occurred.
     */
    eventPosition(event) {
        const isTouchEvent = event instanceof TouchEvent;
        const newX = isTouchEvent
            ? event.touches[0].pageX
            : event.clientX;
        const newY = isTouchEvent
            ? event.touches[0].pageY
            : event.clientY;
        return {
            x: newX,
            y: newY,
        };
    }
    getElementSizeMinusPadding(element) {
        const computedStyle = this.window.getComputedStyle(element);
        const width = element.clientWidth -
            (parseFloat(computedStyle.paddingLeft) +
                parseFloat(computedStyle.paddingRight));
        const height = element.clientHeight -
            (parseFloat(computedStyle.paddingTop) +
                parseFloat(computedStyle.paddingBottom));
        return { width, height };
    }
    constructor() {
        super(INITIAL_STATE);
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.8", ngImport: i0, type: SimpleSketchCanvasStore, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.0.8", ngImport: i0, type: SimpleSketchCanvasStore });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.8", ngImport: i0, type: SimpleSketchCanvasStore, decorators: [{
            type: Injectable
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,
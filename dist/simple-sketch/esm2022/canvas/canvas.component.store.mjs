import { Injectable, inject } from '@angular/core';
import { ComponentStore } from '@ngrx/component-store';
import { ReplaySubject, combineLatest, debounceTime, filter, fromEvent, of, switchMap, takeUntil, tap, withLatestFrom, } from 'rxjs';
import { WINDOW } from '../injection-tokens';
import { Mode } from '../toolbar/toolbar.component';
import * as i0 from "@angular/core";
const INITIAL_STATE = {
    backgroundColor: '#000000',
    isSketching: false,
    lastX: 0,
    lastY: 0,
    lineWidth: 5,
    mode: Mode.SKETCH,
    paintColor: '#ffffff',
};
export class SimpleSketchCanvasStore extends ComponentStore {
    canvas$ = new ReplaySubject(1);
    context$ = new ReplaySubject(1);
    window = inject(WINDOW);
    /**
     * +-------------------------------------------+
     * SELECTORS
     * +-------------------------------------------+
     */
    backgroundColor$ = this.select(state => state.backgroundColor);
    isSketching$ = this.select(state => state.isSketching);
    lineWidth$ = this.select(state => state.lineWidth);
    mode$ = this.select(state => state.mode);
    paintColor$ = this.select(state => state.paintColor);
    lastPosition$ = this.select(state => ({
        x: state.lastX,
        y: state.lastY,
    }));
    /**
     * +-------------------------------------------+
     * UPDATERS
     * +-------------------------------------------+
     */
    updateBackGroundColor = this.updater((state, newBackgroundColor) => ({
        ...state,
        backgroundColor: newBackgroundColor,
    }));
    updateIsSketching = this.updater((state, isSketching) => ({
        ...state,
        isSketching,
    }));
    updatePaintColor = this.updater((state, newPaintColor) => ({
        ...state,
        paintColor: newPaintColor,
    }));
    updateMode = this.updater((state, newMode) => ({
        ...state,
        mode: newMode,
    }));
    updateLastPosition = this.updater((state, newPosition) => ({
        ...state,
        lastX: newPosition.x,
        lastY: newPosition.y,
    }));
    /**
     * +-------------------------------------------+
     * EFFECTS
     * +-------------------------------------------+
     */
    applyBackgroundColor = this.effect((trigger$) => {
        return combineLatest([
            trigger$,
            this.backgroundColor$,
            this.canvas$,
        ]).pipe(tap(([, color, canvas]) => {
            if (canvas) {
                canvas.style.backgroundColor = color;
            }
        }));
    });
    clearCanvas = this.effect((trigger$) => combineLatest([trigger$, this.context$, this.canvas$]).pipe(tap(([, context, canvas]) => {
        if (context && canvas) {
            context.clearRect(0, 0, canvas.width, canvas.height);
        }
    })));
    init = this.effect((initData$) => {
        return initData$.pipe(tap(([canvas, backgroundColor, paintColor]) => {
            const context = canvas.getContext('2d');
            // Initialize canvas & context properties using the supplied `canvas`.
            this.canvas$.next(canvas);
            this.context$.next(context);
            // Canvases must have their width and height pixel values set. The
            // canvas' _parent (`.canvas-wrapper`), flexes to grow to the
            // available space. Set the actual canvas element to the pixel
            // dimensions available inside its parent.
            const canvasWrapper = canvas.parentElement;
            const canvasWrapperSize = this.getElementSizeMinusPadding(canvasWrapper);
            this.resizeCanvas([
                canvasWrapperSize.width,
                canvasWrapperSize.height,
            ]);
            // Update property values in component state.
            this.updateBackGroundColor(backgroundColor);
            this.updatePaintColor(paintColor);
            this.applyBackgroundColor();
            // Subscribe to resize events so the canvas' pixel dimensions redraw
            // using the values from the post-resize available space.
            fromEvent(this.window, 'resize')
                .pipe(takeUntil(this.destroy$), debounceTime(75))
                .subscribe(() => {
                const canvasWrapperSize = this.getElementSizeMinusPadding(canvasWrapper);
                this.resizeCanvas([
                    canvasWrapperSize.width,
                    canvasWrapperSize.height,
                ]);
            });
        }));
    });
    resizeCanvas = this.effect((resizeData$) => {
        return resizeData$.pipe(switchMap(([width, height]) => {
            return combineLatest([
                this.canvas$,
                this.context$,
                of(width),
                of(height),
            ]);
        }), filter(
        /* eslint-disable @typescript-eslint/no-unused-vars */
        ([canvas, context, width, height]) => canvas !== null && context !== null), tap(([canvas, context, width, height]) => {
            // Resizing the canvas will clear its contents, so store the current
            // canvas contents before resizing so they can be restored after.
            const currentCanvasContent = context.getImageData(0, 0, canvas.width, canvas.height);
            // Now resize the canvas.
            canvas.width = width;
            canvas.height = height;
            // Reapply saved contents.
            context.putImageData(currentCanvasContent, 0, 0);
        }));
    });
    sketch = this.effect((event$) => {
        return event$.pipe(withLatestFrom(this.context$, this.isSketching$, this.lineWidth$, this.paintColor$, this.mode$, this.lastPosition$), tap(([event, context, isSketching, lineWidth, paintColor, mode, lastPosition,]) => {
            event.preventDefault();
            const screenPosition = this.getEventPosition(event, context.canvas);
            if (isSketching && context) {
                context.beginPath();
                context.lineCap = 'round';
                context.lineJoin = 'round';
                context.strokeStyle = paintColor;
                if (mode === Mode.SKETCH) {
                    context.lineWidth = lineWidth;
                    context.globalCompositeOperation = 'source-over';
                }
                else if (mode === Mode.ERASE) {
                    // Make the eraser larger than the finer point brush used for
                    // sketching.
                    context.lineWidth = lineWidth * 5;
                    context.globalCompositeOperation = 'destination-out';
                }
                else {
                    console.error('Unexpected or empty mode.');
                }
                context.moveTo(lastPosition.x, lastPosition.y);
                context.lineTo(screenPosition.x, screenPosition.y);
                context.stroke();
                this.updateLastPosition(screenPosition);
            }
        }));
    });
    startSketch = this.effect((event$) => {
        return combineLatest([event$, this.context$]).pipe(tap(([event, context]) => {
            event.preventDefault();
            this.updateIsSketching(true);
            const screenPosition = this.getEventPosition(event, context.canvas);
            this.updateLastPosition(screenPosition);
        }));
    });
    stopSketch = this.effect((event$) => {
        return event$.pipe(tap((event) => {
            event.preventDefault();
            this.updateIsSketching(false);
        }));
    });
    /**
     * +-------------------------------------------+
     * CLASS METHODS
     * +-------------------------------------------+
     */
    /**
     * Takes a mousemove or touchmove event and return the corresponding position
     * on the screen where the event occurred.
     */
    getEventPosition(event, element) {
        const x = (event.pageX ??
            event.targetTouches[0].pageX) - element.offsetLeft;
        const y = (event.pageY ??
            event.targetTouches[0].pageY) - element.offsetTop;
        return { x, y };
    }
    /** Returns the size of a supplied element, minus its padding. */
    getElementSizeMinusPadding(element) {
        const computedStyle = this.window.getComputedStyle(element);
        const width = element.clientWidth -
            (parseFloat(computedStyle.paddingLeft) +
                parseFloat(computedStyle.paddingRight));
        const height = element.clientHeight -
            (parseFloat(computedStyle.paddingTop) +
                parseFloat(computedStyle.paddingBottom));
        return { width, height };
    }
    constructor() {
        super(INITIAL_STATE);
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.8", ngImport: i0, type: SimpleSketchCanvasStore, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.0.8", ngImport: i0, type: SimpleSketchCanvasStore });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.8", ngImport: i0, type: SimpleSketchCanvasStore, decorators: [{
            type: Injectable
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FudmFzLmNvbXBvbmVudC5zdG9yZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9zaW1wbGUtc2tldGNoL2NhbnZhcy9jYW52YXMuY29tcG9uZW50LnN0b3JlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ2pELE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUNyRCxPQUFPLEVBRUwsYUFBYSxFQUNiLGFBQWEsRUFDYixZQUFZLEVBQ1osTUFBTSxFQUNOLFNBQVMsRUFDVCxFQUFFLEVBQ0YsU0FBUyxFQUNULFNBQVMsRUFDVCxHQUFHLEVBQ0gsY0FBYyxHQUNmLE1BQU0sTUFBTSxDQUFDO0FBQ2QsT0FBTyxFQUFDLE1BQU0sRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBQzNDLE9BQU8sRUFBQyxJQUFJLEVBQUMsTUFBTSw4QkFBOEIsQ0FBQzs7QUFZbEQsTUFBTSxhQUFhLEdBQTRCO0lBQzdDLGVBQWUsRUFBRSxTQUFTO0lBQzFCLFdBQVcsRUFBRSxLQUFLO0lBQ2xCLEtBQUssRUFBRSxDQUFDO0lBQ1IsS0FBSyxFQUFFLENBQUM7SUFDUixTQUFTLEVBQUUsQ0FBQztJQUNaLElBQUksRUFBRSxJQUFJLENBQUMsTUFBTTtJQUNqQixVQUFVLEVBQUUsU0FBUztDQUN0QixDQUFDO0FBYUYsTUFBTSxPQUFPLHVCQUF3QixTQUFRLGNBQXVDO0lBQzFFLE9BQU8sR0FBRyxJQUFJLGFBQWEsQ0FBb0IsQ0FBQyxDQUFDLENBQUM7SUFDbEQsUUFBUSxHQUFHLElBQUksYUFBYSxDQUEyQixDQUFDLENBQUMsQ0FBQztJQUMxRCxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWhDOzs7O09BSUc7SUFDTSxnQkFBZ0IsR0FBdUIsSUFBSSxDQUFDLE1BQU0sQ0FDekQsS0FBSyxDQUFDLEVBQUUsQ0FB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LENBQUMsQ0FBQyxDQUFDO1FBQzVDLE1BQU0sTUFBTSxHQUNWLE9BQU8sQ0FBQyxZQUFZO1lBQ3BCLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUM7Z0JBQ25DLFVBQVUsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztRQUM3QyxPQUFPLEVBQUMsS0FBSyxFQUFFLE1BQU0sRUFBUyxDQUFDO0lBQ2pDLENBQUM7SUFFRDtRQUNFLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUN2QixDQUFDO3VHQTNTVSx1QkFBdUI7MkdBQXZCLHVCQUF1Qjs7MkZBQXZCLHVCQUF1QjtrQkFEbkMsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZSwgaW5qZWN0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7Q29tcG9uZW50U3RvcmV9IGZyb20gJ0BuZ3J4L2NvbXBvbmVudC1zdG9yZSc7XG5pbXBvcnQge1xuICBPYnNlcnZhYmxlLFxuICBSZXBsYXlTdWJqZWN0LFxuICBjb21iaW5lTGF0ZXN0LFxuICBkZWJvdW5jZVRpbWUsXG4gIGZpbHRlcixcbiAgZnJvbUV2ZW50LFxuICBvZixcbiAgc3dpdGNoTWFwLFxuICB0YWtlVW50aWwsXG4gIHRhcCxcbiAgd2l0aExhdGVzdEZyb20sXG59IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtXSU5ET1d9IGZyb20gJy4uL2luamVjdGlvbi10b2tlbnMnO1xuaW1wb3J0IHtNb2RlfSBmcm9tICcuLi90b29sYmFyL3Rvb2xiYXIuY29tcG9uZW50JztcblxuZXhwb3J0IGludGVyZmFjZSBTaW1wbGVTa2V0Y2hDYW52YXNTdGF0ZSB7XG4gIGJhY2tncm91bmRDb2xvcjogc3RyaW5nO1xuICBpc1NrZXRjaGluZzogYm9vbGVhbjtcbiAgbGFzdFg6IG51bWJlcjtcbiAgbGFzdFk6IG51bWJlcjtcbiAgbGluZVdpZHRoOiBudW1iZXI7XG4gIG1vZGU6IE1vZGU7XG4gIHBhaW50Q29sb3I6IHN0cmluZztcbn1cblxuY29uc3QgSU5JVElBTF9TVEFURTogU2ltcGxlU2tldGNoQ2FudmFzU3RhdGUgPSB7XG4gIGJhY2tncm91bmRDb2xvcjogJyMwMDAwMDAnLFxuICBpc1NrZXRjaGluZzogZmFsc2UsXG4gIGxhc3RYOiAwLFxuICBsYXN0WTogMCxcbiAgbGluZVdpZHRoOiA1LFxuICBtb2RlOiBNb2RlLlNLRVRDSCxcbiAgcGFpbnRDb2xvcjogJyNmZmZmZmYnLFxufTtcblxuZXhwb3J0IGludGVyZmFjZSBQb2ludCB7XG4gIHg6IG51bWJlcjtcbiAgeTogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNpemUge1xuICBoZWlnaHQ6IG51bWJlcjtcbiAgd2lkdGg6IG51bWJlcjtcbn1cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFNpbXBsZVNrZXRjaENhbnZhc1N0b3JlIGV4dGVuZHMgQ29tcG9uZW50U3RvcmU8U2ltcGxlU2tldGNoQ2FudmFzU3RhdGU+IHtcbiAgcHJpdmF0ZSBjYW52YXMkID0gbmV3IFJlcGxheVN1YmplY3Q8SFRNTENhbnZhc0VsZW1lbnQ+KDEpO1xuICBwcml2YXRlIGNvbnRleHQkID0gbmV3IFJlcGxheVN1YmplY3Q8Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEPigxKTtcbiAgcHJpdmF0ZSB3aW5kb3cgPSBpbmplY3QoV0lORE9XKTtcblxuICAvKipcbiAgICogKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rXG4gICAqIFNFTEVDVE9SU1xuICAgKiArLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLStcbiAgICovXG4gIHJlYWRvbmx5IGJhY2tncm91bmRDb2xvciQ6IE9ic2VydmFibGU8c3RyaW5nPiA9IHRoaXMuc2VsZWN0KFxuICAgIHN0YXRlID0+IHN0YXRlLmJhY2tncm91bmRDb2xvclxuICApO1xuXG4gIHJlYWRvbmx5IGlzU2tldGNoaW5nJDogT2JzZXJ2YWJsZTxib29sZWFuPiA9IHRoaXMuc2VsZWN0KFxuICAgIHN0YXRlID0+IHN0YXRlLmlzU2tldGNoaW5nXG4gICk7XG5cbiAgcmVhZG9ubHkgbGluZVdpZHRoJDogT2JzZXJ2YWJsZTxudW1iZXI+ID0gdGhpcy5zZWxlY3QoXG4gICAgc3RhdGUgPT4gc3RhdGUubGluZVdpZHRoXG4gICk7XG5cbiAgcmVhZG9ubHkgbW9kZSQ6IE9ic2VydmFibGU8TW9kZT4gPSB0aGlzLnNlbGVjdChzdGF0ZSA9PiBzdGF0ZS5tb2RlKTtcblxuICByZWFkb25seSBwYWludENvbG9yJDogT2JzZXJ2YWJsZTxzdHJpbmc+ID0gdGhpcy5zZWxlY3QoXG4gICAgc3RhdGUgPT4gc3RhdGUucGFpbnRDb2xvclxuICApO1xuXG4gIHJlYWRvbmx5IGxhc3RQb3NpdGlvbiQ6IE9ic2VydmFibGU8UG9pbnQ+ID0gdGhpcy5zZWxlY3Qoc3RhdGUgPT4gKHtcbiAgICB4OiBzdGF0ZS5sYXN0WCxcbiAgICB5OiBzdGF0ZS5sYXN0WSxcbiAgfSkpO1xuXG4gIC8qKlxuICAgKiArLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLStcbiAgICogVVBEQVRFUlNcbiAgICogKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rXG4gICAqL1xuICByZWFkb25seSB1cGRhdGVCYWNrR3JvdW5kQ29sb3IgPSB0aGlzLnVwZGF0ZXIoXG4gICAgKHN0YXRlLCBuZXdCYWNrZ3JvdW5kQ29sb3I6IHN0cmluZykgPT4gKHtcbiAgICAgIC4uLnN0YXRlLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiBuZXdCYWNrZ3JvdW5kQ29sb3IsXG4gICAgfSlcbiAgKTtcblxuICByZWFkb25seSB1cGRhdGVJc1NrZXRjaGluZyA9IHRoaXMudXBkYXRlcigoc3RhdGUsIGlzU2tldGNoaW5nOiBib29sZWFuKSA9PiAoe1xuICAgIC4uLnN0YXRlLFxuICAgIGlzU2tldGNoaW5nLFxuICB9KSk7XG5cbiAgcmVhZG9ubHkgdXBkYXRlUGFpbnRDb2xvciA9IHRoaXMudXBkYXRlcigoc3RhdGUsIG5ld1BhaW50Q29sb3I6IHN0cmluZykgPT4gKHtcbiAgICAuLi5zdGF0ZSxcbiAgICBwYWludENvbG9yOiBuZXdQYWludENvbG9yLFxuICB9KSk7XG5cbiAgcmVhZG9ubHkgdXBkYXRlTW9kZSA9IHRoaXMudXBkYXRlcigoc3RhdGUsIG5ld01vZGU6IE1vZGUpID0+ICh7XG4gICAgLi4uc3RhdGUsXG4gICAgbW9kZTogbmV3TW9kZSxcbiAgfSkpO1xuXG4gIHJlYWRvbmx5IHVwZGF0ZUxhc3RQb3NpdGlvbiA9IHRoaXMudXBkYXRlcigoc3RhdGUsIG5ld1Bvc2l0aW9uOiBQb2ludCkgPT4gKHtcbiAgICAuLi5zdGF0ZSxcbiAgICBsYXN0WDogbmV3UG9zaXRpb24ueCxcbiAgICBsYXN0WTogbmV3UG9zaXRpb24ueSxcbiAgfSkpO1xuXG4gIC8qKlxuICAgKiArLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLStcbiAgICogRUZGRUNUU1xuICAgKiArLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLStcbiAgICovXG4gIHJlYWRvbmx5IGFwcGx5QmFja2dyb3VuZENvbG9yID0gdGhpcy5lZmZlY3Q8dm9pZD4oXG4gICAgKHRyaWdnZXIkOiBPYnNlcnZhYmxlPHZvaWQ+KSA9PiB7XG4gICAgICByZXR1cm4gY29tYmluZUxhdGVzdChbXG4gICAgICAgIHRyaWdnZXIkLFxuICAgICAgICB0aGlzLmJhY2tncm91bmRDb2xvciQsXG4gICAgICAgIHRoaXMuY2FudmFzJCxcbiAgICAgIF0pLnBpcGUoXG4gICAgICAgIHRhcCgoWywgY29sb3IsIGNhbnZhc10pID0+IHtcbiAgICAgICAgICBpZiAoY2FudmFzKSB7XG4gICAgICAgICAgICBjYW52YXMuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gY29sb3I7XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG4gICk7XG5cbiAgcmVhZG9ubHkgY2xlYXJDYW52YXMgPSB0aGlzLmVmZmVjdDx2b2lkPigodHJpZ2dlciQ6IE9ic2VydmFibGU8dm9pZD4pID0+XG4gICAgY29tYmluZUxhdGVzdChbdHJpZ2dlciQsIHRoaXMuY29udGV4dCQsIHRoaXMuY2FudmFzJF0pLnBpcGUoXG4gICAgICB0YXAoKFssIGNvbnRleHQsIGNhbnZhc10pID0+IHtcbiAgICAgICAgaWYgKGNvbnRleHQgJiYgY2FudmFzKSB7XG4gICAgICAgICAgY29udGV4dC5jbGVhclJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICApXG4gICk7XG5cbiAgcmVhZG9ubHkgaW5pdCA9IHRoaXMuZWZmZWN0KFxuICAgIChpbml0RGF0YSQ6IE9ic2VydmFibGU8W0hUTUxDYW52YXNFbGVtZW50LCBzdHJpbmcsIHN0cmluZ10+KSA9PiB7XG4gICAgICByZXR1cm4gaW5pdERhdGEkLnBpcGUoXG4gICAgICAgIHRhcCgoW2NhbnZhcywgYmFja2dyb3VuZENvbG9yLCBwYWludENvbG9yXSkgPT4ge1xuICAgICAgICAgIGNvbnN0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgICAgICAvLyBJbml0aWFsaXplIGNhbnZhcyAmIGNvbnRleHQgcHJvcGVydGllcyB1c2luZyB0aGUgc3VwcGxpZWQgYGNhbnZhc2AuXG4gICAgICAgICAgdGhpcy5jYW52YXMkLm5leHQoY2FudmFzKTtcbiAgICAgICAgICB0aGlzLmNvbnRleHQkLm5leHQoY29udGV4dCBhcyBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQpO1xuXG4gICAgICAgICAgLy8gQ2FudmFzZXMgbXVzdCBoYXZlIHRoZWlyIHdpZHRoIGFuZCBoZWlnaHQgcGl4ZWwgdmFsdWVzIHNldC4gVGhlXG4gICAgICAgICAgLy8gY2FudmFzJyBfcGFyZW50IChgLmNhbnZhcy13cmFwcGVyYCksIGZsZXhlcyB0byBncm93IHRvIHRoZVxuICAgICAgICAgIC8vIGF2YWlsYWJsZSBzcGFjZS4gU2V0IHRoZSBhY3R1YWwgY2FudmFzIGVsZW1lbnQgdG8gdGhlIHBpeGVsXG4gICAgICAgICAgLy8gZGltZW5zaW9ucyBhdmFpbGFibGUgaW5zaWRlIGl0cyBwYXJlbnQuXG4gICAgICAgICAgY29uc3QgY2FudmFzV3JhcHBlciA9IGNhbnZhcy5wYXJlbnRFbGVtZW50IGFzIEhUTUxFbGVtZW50O1xuICAgICAgICAgIGNvbnN0IGNhbnZhc1dyYXBwZXJTaXplID1cbiAgICAgICAgICAgIHRoaXMuZ2V0RWxlbWVudFNpemVNaW51c1BhZGRpbmcoY2FudmFzV3JhcHBlcik7XG5cbiAgICAgICAgICB0aGlzLnJlc2l6ZUNhbnZhcyhbXG4gICAgICAgICAgICBjYW52YXNXcmFwcGVyU2l6ZS53aWR0aCxcbiAgICAgICAgICAgIGNhbnZhc1dyYXBwZXJTaXplLmhlaWdodCxcbiAgICAgICAgICBdKTtcblxuICAgICAgICAgIC8vIFVwZGF0ZSBwcm9wZXJ0eSB2YWx1ZXMgaW4gY29tcG9uZW50IHN0YXRlLlxuICAgICAgICAgIHRoaXMudXBkYXRlQmFja0dyb3VuZENvbG9yKGJhY2tncm91bmRDb2xvcik7XG4gICAgICAgICAgdGhpcy51cGRhdGVQYWludENvbG9yKHBhaW50Q29sb3IpO1xuXG4gICAgICAgICAgdGhpcy5hcHBseUJhY2tncm91bmRDb2xvcigpO1xuXG4gICAgICAgICAgLy8gU3Vic2NyaWJlIHRvIHJlc2l6ZSBldmVudHMgc28gdGhlIGNhbnZhcycgcGl4ZWwgZGltZW5zaW9ucyByZWRyYXdcbiAgICAgICAgICAvLyB1c2luZyB0aGUgdmFsdWVzIGZyb20gdGhlIHBvc3QtcmVzaXplIGF2YWlsYWJsZSBzcGFjZS5cbiAgICAgICAgICBmcm9tRXZlbnQodGhpcy53aW5kb3csICdyZXNpemUnKVxuICAgICAgICAgICAgLnBpcGUodGFrZVVudGlsKHRoaXMuZGVzdHJveSQpLCBkZWJvdW5jZVRpbWUoNzUpKVxuICAgICAgICAgICAgLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IGNhbnZhc1dyYXBwZXJTaXplID1cbiAgICAgICAgICAgICAgICB0aGlzLmdldEVsZW1lbnRTaXplTWludXNQYWRkaW5nKGNhbnZhc1dyYXBwZXIpO1xuXG4gICAgICAgICAgICAgIHRoaXMucmVzaXplQ2FudmFzKFtcbiAgICAgICAgICAgICAgICBjYW52YXNXcmFwcGVyU2l6ZS53aWR0aCxcbiAgICAgICAgICAgICAgICBjYW52YXNXcmFwcGVyU2l6ZS5oZWlnaHQsXG4gICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH1cbiAgKTtcblxuICByZWFkb25seSByZXNpemVDYW52YXMgPSB0aGlzLmVmZmVjdChcbiAgICAocmVzaXplRGF0YSQ6IE9ic2VydmFibGU8W251bWJlciwgbnVtYmVyXT4pID0+IHtcbiAgICAgIHJldHVybiByZXNpemVEYXRhJC5waXBlKFxuICAgICAgICBzd2l0Y2hNYXAoKFt3aWR0aCwgaGVpZ2h0XSkgPT4ge1xuICAgICAgICAgIHJldHVybiBjb21iaW5lTGF0ZXN0KFtcbiAgICAgICAgICAgIHRoaXMuY2FudmFzJCxcbiAgICAgICAgICAgIHRoaXMuY29udGV4dCQsXG4gICAgICAgICAgICBvZih3aWR0aCksXG4gICAgICAgICAgICBvZihoZWlnaHQpLFxuICAgICAgICAgIF0pO1xuICAgICAgICB9KSxcbiAgICAgICAgZmlsdGVyKFxuICAgICAgICAgIC8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFycyAqL1xuICAgICAgICAgIChbY2FudmFzLCBjb250ZXh0LCB3aWR0aCwgaGVpZ2h0XSkgPT5cbiAgICAgICAgICAgIGNhbnZhcyAhPT0gbnVsbCAmJiBjb250ZXh0ICE9PSBudWxsXG4gICAgICAgICksXG4gICAgICAgIHRhcCgoW2NhbnZhcywgY29udGV4dCwgd2lkdGgsIGhlaWdodF0pID0+IHtcbiAgICAgICAgICAvLyBSZXNpemluZyB0aGUgY2FudmFzIHdpbGwgY2xlYXIgaXRzIGNvbnRlbnRzLCBzbyBzdG9yZSB0aGUgY3VycmVudFxuICAgICAgICAgIC8vIGNhbnZhcyBjb250ZW50cyBiZWZvcmUgcmVzaXppbmcgc28gdGhleSBjYW4gYmUgcmVzdG9yZWQgYWZ0ZXIuXG4gICAgICAgICAgY29uc3QgY3VycmVudENhbnZhc0NvbnRlbnQgPSBjb250ZXh0IS5nZXRJbWFnZURhdGEoXG4gICAgICAgICAgICAwLFxuICAgICAgICAgICAgMCxcbiAgICAgICAgICAgIGNhbnZhcyEud2lkdGgsXG4gICAgICAgICAgICBjYW52YXMhLmhlaWdodFxuICAgICAgICAgICk7XG5cbiAgICAgICAgICAvLyBOb3cgcmVzaXplIHRoZSBjYW52YXMuXG4gICAgICAgICAgY2FudmFzIS53aWR0aCA9IHdpZHRoO1xuICAgICAgICAgIGNhbnZhcyEuaGVpZ2h0ID0gaGVpZ2h0O1xuXG4gICAgICAgICAgLy8gUmVhcHBseSBzYXZlZCBjb250ZW50cy5cbiAgICAgICAgICBjb250ZXh0IS5wdXRJbWFnZURhdGEoY3VycmVudENhbnZhc0NvbnRlbnQsIDAsIDApO1xuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG4gICk7XG5cbiAgcmVhZG9ubHkgc2tldGNoID0gdGhpcy5lZmZlY3QoXG4gICAgKGV2ZW50JDogT2JzZXJ2YWJsZTxNb3VzZUV2ZW50IHwgVG91Y2hFdmVudD4pID0+IHtcbiAgICAgIHJldHVybiBldmVudCQucGlwZShcbiAgICAgICAgd2l0aExhdGVzdEZyb20oXG4gICAgICAgICAgdGhpcy5jb250ZXh0JCxcbiAgICAgICAgICB0aGlzLmlzU2tldGNoaW5nJCxcbiAgICAgICAgICB0aGlzLmxpbmVXaWR0aCQsXG4gICAgICAgICAgdGhpcy5wYWludENvbG9yJCxcbiAgICAgICAgICB0aGlzLm1vZGUkLFxuICAgICAgICAgIHRoaXMubGFzdFBvc2l0aW9uJFxuICAgICAgICApLFxuICAgICAgICB0YXAoXG4gICAgICAgICAgKFtcbiAgICAgICAgICAgIGV2ZW50LFxuICAgICAgICAgICAgY29udGV4dCxcbiAgICAgICAgICAgIGlzU2tldGNoaW5nLFxuICAgICAgICAgICAgbGluZVdpZHRoLFxuICAgICAgICAgICAgcGFpbnRDb2xvcixcbiAgICAgICAgICAgIG1vZGUsXG4gICAgICAgICAgICBsYXN0UG9zaXRpb24sXG4gICAgICAgICAgXSkgPT4ge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgY29uc3Qgc2NyZWVuUG9zaXRpb24gPSB0aGlzLmdldEV2ZW50UG9zaXRpb24oZXZlbnQsIGNvbnRleHQuY2FudmFzKTtcbiAgICAgICAgICAgIGlmIChpc1NrZXRjaGluZyAmJiBjb250ZXh0KSB7XG4gICAgICAgICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICAgIGNvbnRleHQubGluZUNhcCA9ICdyb3VuZCc7XG4gICAgICAgICAgICAgIGNvbnRleHQubGluZUpvaW4gPSAncm91bmQnO1xuICAgICAgICAgICAgICBjb250ZXh0LnN0cm9rZVN0eWxlID0gcGFpbnRDb2xvcjtcblxuICAgICAgICAgICAgICBpZiAobW9kZSA9PT0gTW9kZS5TS0VUQ0gpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmxpbmVXaWR0aCA9IGxpbmVXaWR0aDtcbiAgICAgICAgICAgICAgICBjb250ZXh0Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9ICdzb3VyY2Utb3Zlcic7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAobW9kZSA9PT0gTW9kZS5FUkFTRSkge1xuICAgICAgICAgICAgICAgIC8vIE1ha2UgdGhlIGVyYXNlciBsYXJnZXIgdGhhbiB0aGUgZmluZXIgcG9pbnQgYnJ1c2ggdXNlZCBmb3JcbiAgICAgICAgICAgICAgICAvLyBza2V0Y2hpbmcuXG4gICAgICAgICAgICAgICAgY29udGV4dC5saW5lV2lkdGggPSBsaW5lV2lkdGggKiA1O1xuICAgICAgICAgICAgICAgIGNvbnRleHQuZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gJ2Rlc3RpbmF0aW9uLW91dCc7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignVW5leHBlY3RlZCBvciBlbXB0eSBtb2RlLicpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgY29udGV4dC5tb3ZlVG8obGFzdFBvc2l0aW9uLngsIGxhc3RQb3NpdGlvbi55KTtcbiAgICAgICAgICAgICAgY29udGV4dC5saW5lVG8oc2NyZWVuUG9zaXRpb24ueCwgc2NyZWVuUG9zaXRpb24ueSk7XG4gICAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XG5cbiAgICAgICAgICAgICAgdGhpcy51cGRhdGVMYXN0UG9zaXRpb24oc2NyZWVuUG9zaXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG4gICk7XG5cbiAgcmVhZG9ubHkgc3RhcnRTa2V0Y2ggPSB0aGlzLmVmZmVjdChcbiAgICAoZXZlbnQkOiBPYnNlcnZhYmxlPE1vdXNlRXZlbnQgfCBUb3VjaEV2ZW50PikgPT4ge1xuICAgICAgcmV0dXJuIGNvbWJpbmVMYXRlc3QoW2V2ZW50JCwgdGhpcy5jb250ZXh0JF0pLnBpcGUoXG4gICAgICAgIHRhcCgoW2V2ZW50LCBjb250ZXh0XSkgPT4ge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgdGhpcy51cGRhdGVJc1NrZXRjaGluZyh0cnVlKTtcblxuICAgICAgICAgIGNvbnN0IHNjcmVlblBvc2l0aW9uID0gdGhpcy5nZXRFdmVudFBvc2l0aW9uKGV2ZW50LCBjb250ZXh0LmNhbnZhcyk7XG4gICAgICAgICAgdGhpcy51cGRhdGVMYXN0UG9zaXRpb24oc2NyZWVuUG9zaXRpb24pO1xuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG4gICk7XG5cbiAgcmVhZG9ubHkgc3RvcFNrZXRjaCA9IHRoaXMuZWZmZWN0KFxuICAgIChldmVudCQ6IE9ic2VydmFibGU8TW91c2VFdmVudCB8IFRvdWNoRXZlbnQ+KSA9PiB7XG4gICAgICByZXR1cm4gZXZlbnQkLnBpcGUoXG4gICAgICAgIHRhcCgoZXZlbnQ6IEV2ZW50KSA9PiB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB0aGlzLnVwZGF0ZUlzU2tldGNoaW5nKGZhbHNlKTtcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfVxuICApO1xuXG4gIC8qKlxuICAgKiArLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLStcbiAgICogQ0xBU1MgTUVUSE9EU1xuICAgKiArLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLStcbiAgICovXG5cbiAgLyoqXG4gICAqIFRha2VzIGEgbW91c2Vtb3ZlIG9yIHRvdWNobW92ZSBldmVudCBhbmQgcmV0dXJuIHRoZSBjb3JyZXNwb25kaW5nIHBvc2l0aW9uXG4gICAqIG9uIHRoZSBzY3JlZW4gd2hlcmUgdGhlIGV2ZW50IG9jY3VycmVkLlxuICAgKi9cbiAgcHJpdmF0ZSBnZXRFdmVudFBvc2l0aW9uKFxuICAgIGV2ZW50OiBNb3VzZUV2ZW50IHwgVG91Y2hFdmVudCxcbiAgICBlbGVtZW50OiBIVE1MQ2FudmFzRWxlbWVudFxuICApOiBQb2ludCB7XG4gICAgY29uc3QgeCA9XG4gICAgICAoKGV2ZW50IGFzIE1vdXNlRXZlbnQpLnBhZ2VYID8/XG4gICAgICAgIChldmVudCBhcyBUb3VjaEV2ZW50KS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYKSAtIGVsZW1lbnQub2Zmc2V0TGVmdDtcbiAgICBjb25zdCB5ID1cbiAgICAgICgoZXZlbnQgYXMgTW91c2VFdmVudCkucGFnZVkgPz9cbiAgICAgICAgKGV2ZW50IGFzIFRvdWNoRXZlbnQpLnRhcmdldFRvdWNoZXNbMF0ucGFnZVkpIC0gZWxlbWVudC5vZmZzZXRUb3A7XG5cbiAgICByZXR1cm4ge3gsIHl9O1xuICB9XG5cbiAgLyoqIFJldHVybnMgdGhlIHNpemUgb2YgYSBzdXBwbGllZCBlbGVtZW50LCBtaW51cyBpdHMgcGFkZGluZy4gKi9cbiAgcHJpdmF0ZSBnZXRFbGVtZW50U2l6ZU1pbnVzUGFkZGluZyhlbGVtZW50OiBIVE1MRWxlbWVudCk6IFNpemUge1xuICAgIGNvbnN0IGNvbXB1dGVkU3R5bGUgPSB0aGlzLndpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuICAgIGNvbnN0IHdpZHRoID1cbiAgICAgIGVsZW1lbnQuY2xpZW50V2lkdGggLVxuICAgICAgKHBhcnNlRmxvYXQoY29tcHV0ZWRTdHlsZS5wYWRkaW5nTGVmdCkgK1xuICAgICAgICBwYXJzZUZsb2F0KGNvbXB1dGVkU3R5bGUucGFkZGluZ1JpZ2h0KSk7XG4gICAgY29uc3QgaGVpZ2h0ID1cbiAgICAgIGVsZW1lbnQuY2xpZW50SGVpZ2h0IC1cbiAgICAgIChwYXJzZUZsb2F0KGNvbXB1dGVkU3R5bGUucGFkZGluZ1RvcCkgK1xuICAgICAgICBwYXJzZUZsb2F0KGNvbXB1dGVkU3R5bGUucGFkZGluZ0JvdHRvbSkpO1xuICAgIHJldHVybiB7d2lkdGgsIGhlaWdodH0gYXMgU2l6ZTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKElOSVRJQUxfU1RBVEUpO1xuICB9XG59XG4iXX0=